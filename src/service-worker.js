/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';


clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

const CACHE_STATIC = "cache_static_v1";
const CACHE_DYNAMIC = "cache_dynamic_v1";
const CACHE_INMUTABLE = "cache_inmutable_v1";

const APP_SHELL = ['/favicon.ico', 
                  '/', 
                  '/index.html', 
                  '/logo192.png', 
                  '/logo512.png', 
                  '/favicon-16x16.png', 
                  '/favicon-32x32.png', 
                  '/favicon-96x96.png',
                  '/src/assets/images/banner01.jpg',
                  '/src/assets/images/banner02.png',
                  '/src/assets/images/castle01.png',
                  '/src/assets/images/castle02.png',
                  '/src/assets/images/landing.jpg',
                  '/src/assets/images/login.jpg',
                  '/src/assets/images/logo01.png',
                  '/src/assets/images/logo02.png',
                  '/src/assets/images/logo03.jpg',
                  '/src/assets/images/logo04.png'];

const APP_SHELL_INMUTABLE = ['/src/assets/styles/style.css',
                  'https://fonts.googleapis.com/css2?family=Lato&display=swap',
                  '/src/assets/fonts/waltograph42.otf'];

self.addEventListener('install', event =>{
  const promise1 = caches.open(CACHE_STATIC)
                  .then(cache =>{
                    cache.addAll(APP_SHELL)
                  });
  const promise2 = caches.open(CACHE_INMUTABLE)
                  .then(cache =>{
                    cache.addAll(APP_SHELL_INMUTABLE)
                  });
  event.waitUntil(Promise.all([promise1, promise2]));
});

self.addEventListener('activate', event =>{
  const response = caches.keys()
                  .then(keys =>{
                    keys.forEach(key=>{
                      if(key !== CACHE_STATIC && key.includes('static')){
                        return caches.delete(key);
                      }
                    });
                  });
  event.waitUntil(response);
});